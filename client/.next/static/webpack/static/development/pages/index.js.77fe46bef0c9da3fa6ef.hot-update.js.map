{"version":3,"file":"static/webpack/static/development/pages/index.js.77fe46bef0c9da3fa6ef.hot-update.js","sources":["webpack:///./firebase.js"],"sourcesContent":["// https://recordstore-ea36f.firebaseapp.com/__/auth/handler\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport uuid from 'uuid';\n\nconst config = {\n  apiKey: 'AIzaSyC9YAyaVt0s2hijgBLgr7wjm_m71khO9_A',\n  authDomain: 'recordstore-ea36f.firebaseapp.com',\n  databaseURL: 'https://recordstore-ea36f.firebaseio.com',\n  projectId: 'recordstore-ea36f',\n  storageBucket: 'recordstore-ea36f.appspot.com',\n  messagingSenderId: '894584361248'\n};\n\nconst app = !firebase.apps.length\n  ? firebase.initializeApp(config)\n  : firebase.app();\nconst db = firebase.firestore();\nconst users = db.collection('users');\nconst records = db.collection('records');\n\nconst dbQuery = async (collection, query) => {\n  const item = await collection\n    .doc(query)\n    .get()\n    .then(jackpot => jackpot.data());\n  return item;\n};\n\nexport const dbLogin = async ({ email, password }) => {\n  await app.auth().signInWithEmailAndPassword(email, password);\n  return await dbQuery(users, email);\n};\n\nexport const dbRegister = async ({ email, password }) => {\n  await app\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(cred => {\n      users.doc(email).set({\n        id: uuid.v4(),\n        name: {\n          first: '',\n          last: ''\n        },\n        email,\n        picture: '',\n        bio: '',\n        records: []\n      });\n    });\n  return await dbQuery(users, email);\n};\n\nexport const dbLogout = async () => {\n  app.auth().signOut();\n};\n\nexport const dbAccountEditor = async user => {\n  const { email } = user;\n  await users.doc(email).set({ ...user });\n  return await dbQuery(users, email);\n};\n\nexport const dbCreateRecord = async record => {\n  await records.doc(record.title).set({ ...record, id: uuid.v4() });\n  return await dbQuery(records, record.title);\n};\n\nexport const dbDeleteRecord = async (id, email) => {\n  const { records } = await users\n    .doc(email)\n    .get()\n    .then(user => user.data());\n  console.log(records);\n  // return await dbQuery(users, email);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AALA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AATA;AAWA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AALA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}